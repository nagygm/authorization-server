plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.kapt'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id "io.spring.dependency-management"
    id 'jacoco'
    id "org.jetbrains.kotlin.plugin.allopen"
    id("io.gitlab.arturbosch.detekt")
    id 'info.solidsoft.pitest'
    id "org.jetbrains.kotlin.plugin.spring"
}

repositories {
    mavenLocal()           
    jcenter()
    maven { url 'https://kotlin.bintray.com/kotlinx' }
}

dependencies {
    implementation platform("org.jetbrains.kotlin:kotlin-bom:${project.ext.dep.kotlin.platform}")
    implementation platform("org.springframework.boot:spring-boot-dependencies:${project.ext.dep.spring_boot_bom}")
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactive'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation "io.konform:konform-jvm:${project.ext.dep.konform}"

    // log4j2 dependencies
    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    implementation("org.apache.logging.log4j:log4j-core:${project.ext.dep.log4j2}")
    implementation("org.apache.logging.log4j:log4j-api:${project.ext.dep.log4j2}")
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:${project.ext.dep.log4j2}")
    implementation("org.apache.logging.log4j:log4j-layout-template-json:${project.ext.dep.log4j2}")
    modules {
        module("org.springframework.boot:spring-boot-starter-logging") {
            replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
        }
    }

    // Spring Open API documentation
    implementation "org.springdoc:springdoc-openapi-webflux-ui:${project.ext.dep.springdoc}"
    implementation "org.springdoc:springdoc-openapi-kotlin:${project.ext.dep.springdoc}"

    // Test dependencies
    testImplementation(platform("org.junit:junit-bom:${project.ext.dep.junit.bom}"))
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation "io.kotest:kotest-runner-junit5-jvm:${project.ext.dep.kotest}"
    testImplementation "io.kotest:kotest-assertions-core:${project.ext.dep.kotest}"
    testImplementation "io.kotest:kotest-property:${project.ext.dep.kotest}"
//    testImplementation("io.kotest:kotest-plugins-pitest:${project.ext.dep.kotest}")
    testImplementation("io.kotest.extensions:kotest-extensions-spring:${project.ext.dep.kotest_extension}")
    testImplementation("io.kotest.extensions:kotest-extensions-testcontainers:${project.ext.dep.kotest_extension}")
    testImplementation("io.kotest.extensions:kotest-extensions-pitest:${project.ext.dep.kotest_extension}")
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "$project.ext.dep.jacoco"
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

detekt {
    buildUponDefaultConfig = true // preconfigure defaults

    reports {
        html.enabled = true // observe findings in your browser with structure and code snippets
        xml.enabled = true // checkstyle like format mainly for integrations like Jenkins
        txt.enabled = true // similar to the console output, contains issue signature to manually edit baseline files
        sarif.enabled = true // standardized SARIF format (https://sarifweb.azurewebsites.net/) to support integrations with Github Code Scanning
    }
}

pitest {
//    junit5PluginVersion = '0.12'
    testPlugin = "Kotest"
    targetClasses = ['hu.nagygm.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = true
    failWhenNoMutations = false
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
