plugins {
    id 'hu.nagygm.authorization-server.kotlin-application-conventions'
    id 'nu.studer.jooq' version '6.0.1'
    id "org.flywaydb.flyway" version "8.2.0"
}

group 'hu.nagygm'
version '0.0.1'

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}


configurations.integrationTestImplementation.extendsFrom configurations.testImplementation

configurations {
    flywayMigration
}

dependencies {
    implementation project(':oauth2')
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'org.springframework.security:spring-security-oauth2-core'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactive'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    //postgresql
    implementation "org.springframework.data:spring-data-r2dbc:${project.ext.dep.spring_data_r2dbc}"
    implementation "io.r2dbc:r2dbc-postgresql:${project.ext.dep.r2dbc_postgresql}"

    flywayMigration "org.postgresql:postgresql:${project.ext.dep.postgres}"

    //TODO jooq needs more research for reactive
//    implementation "org.jooq:jooq:${project.ext.dep.jooq}"
//    implementation "org.postgresql:postgresql:${project.ext.dep.postgres}"
//    jooqGenerator "org.postgresql:postgresql:${project.ext.dep.postgres}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    integrationTestImplementation "org.springframework.boot:spring-boot-starter-test"
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

flyway {
    url = "jdbc:postgresql://localhost:25432/authserver"
    user = "authserver"
    password = "authserver"
    schemas = ['authserver']
    configurations = ['flywayMigration']
    locations = ["filesystem:db_migration"]
}

//jooq {
//    version = "${project.ext.dep.jooq}"  // the default (can be omitted)
//    configurations {
//        main {
//            generationTool {
//                jdbc {
//                    driver = 'org.postgresql.Driver'
//                    url = 'jdbc:postgresql://localhost:25432/authserver'
//                    user = 'authserver'
//                    password = 'authserver'
//                    properties {
//                        property {
//                            key = 'ssl'
//                            value = 'false'
//                        }
//                    }
//                }
//                generator {
//                    name = 'org.jooq.codegen.DefaultGenerator'
//                    database {
//                        name = 'org.jooq.meta.postgres.PostgresDatabase'
//                        inputSchema = 'public'
//                        forcedTypes {
//                            forcedType {
//                                name = 'varchar'
//                                includeExpression = '.*'
//                                includeTypes = 'JSONB?'
//                            }
//                            forcedType {
//                                name = 'varchar'
//                                includeExpression = '.*'
//                                includeTypes = 'INET'
//                            }
//                        }
//                    }
//                    generate {
//                        deprecated = false
//                        records = true
//                        immutablePojos = true
//                        fluentSetters = true
//                    }
//                    target {
//                        packageName = 'hu.nagygm.server.generated.jooq'
//                        directory = 'build/generated-src/jooq/main'
//                    }
//                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
//                }
//            }
//        }
//    }
//}

